#include "shader/util.glsl"

layout(local_size_x = 1) in;

struct Transform {
	vec4 trans;
	vec4 rotat;
	vec4 bound;
	vec4 mesh;
};

layout(binding = 1, std430) buffer InPosition {
	Transform inTrans[];
};

layout(binding = 2, std430) buffer OutPosition {
	mat4 outMatrices[];
};

#ifndef AnimPass
	layout(binding = 3) buffer IndirectNormal {
		Indirect normals[];
	};
	layout(binding = 4) buffer IndirectSingle {
		Indirect singles[];
	};
	layout(binding = 5) buffer IndirectBill {
		Indirect bills[];
	};
#else
	layout(binding = 6) buffer IndirectAnim {
		Indirect anims[];
	};
#endif

layout(binding = 0) uniform sampler2D texDepth;
uniform mat4 viewProjectMatrix;
uniform uint pass;

void main() {
	uint curIndex = gl_GlobalInvocationID.x + pass * MAX_DISPATCH;
	Transform transform = inTrans[curIndex];
	ivec4 meshid = ivec4(floor(transform.mesh));

	vec3 translate = transform.trans.xyz;
	mat4 outMat;
#ifndef AnimPass
	if(meshid.z >= 0)
		outMat = mat4(transform.trans, transform.rotat, transform.bound, transform.mesh);
	else {
		float scale = transform.trans.w;
		vec4 rotate = transform.rotat;
		outMat = Translate(translate) * QuatToMat4(rotate) * Scale(scale);
	}
#else
	float scale = transform.trans.w;
	vec4 rotate = transform.rotat;
	outMat = Translate(translate) * QuatToMat4(rotate) * Scale(scale);
	outMat = transpose(outMat);
	outMat[3] = transform.mesh;
#endif
	

#ifdef ShadowPass
	#ifndef AnimPass
		if(meshid.x >= 0) outMatrices[normals[meshid.x].baseInstance + atomicAdd(normals[meshid.x].primCount, 1)] = outMat;
		if(meshid.y >= 0) outMatrices[singles[meshid.y].baseInstance + atomicAdd(singles[meshid.y].primCount, 1)] = outMat;
		if(meshid.z >= 0) outMatrices[bills[meshid.z].baseInstance + atomicAdd(bills[meshid.z].primCount, 1)] = outMat;
	#else
		outMatrices[anims[meshid.w].baseInstance + atomicAdd(anims[meshid.w].primCount, 1)] = outMat;
	#endif
#else
		vec4 bound = transform.bound;
		vec3 size = bound.xyz;
		vec3 pose = vec3(translate.x, bound.w, translate.z);

		vec4 bv0 = vec4(pose + size * vec3( 0.5, 0.5,  0.5), 1.0);
		vec4 bv1 = vec4(pose + size * vec3( 0.5, 0.5, -0.5), 1.0);
		vec4 bv2 = vec4(pose + size * vec3(-0.5, 0.5, -0.5), 1.0);
		vec4 bv3 = vec4(pose + size * vec3(-0.5, 0.5,  0.5), 1.0);

		bv0 = viewProjectMatrix * bv0;
		bv1 = viewProjectMatrix * bv1;
		bv2 = viewProjectMatrix * bv2;
		bv3 = viewProjectMatrix * bv3;
		vec4 inv = 1.0 / vec4(bv0.w, bv1.w, bv2.w, bv3.w);

		vec3 t0 = bv0.xyz * inv.x * 0.5 + 0.5;
		vec3 t1 = bv1.xyz * inv.y * 0.5 + 0.5;
		vec3 t2 = bv2.xyz * inv.z * 0.5 + 0.5;
		vec3 t3 = bv3.xyz * inv.w * 0.5 + 0.5;

		vec4 ocDepth = vec4(texture(texDepth, t0.xy).x,
							texture(texDepth, t1.xy).x,
							texture(texDepth, t2.xy).x,
							texture(texDepth, t3.xy).x);
		vec4 bbDepth = vec4(t0.z, t1.z, t2.z, t3.z);
		vec4 dd = bbDepth - ocDepth;
		
		if(all(greaterThan(dd, vec4(0.0001)))) return;
		else {
			#ifndef AnimPass
				if(meshid.x >= 0) outMatrices[normals[meshid.x].baseInstance + atomicAdd(normals[meshid.x].primCount, 1)] = outMat;
				if(meshid.y >= 0) outMatrices[singles[meshid.y].baseInstance + atomicAdd(singles[meshid.y].primCount, 1)] = outMat;
				if(meshid.z >= 0) outMatrices[bills[meshid.z].baseInstance + atomicAdd(bills[meshid.z].primCount, 1)] = outMat;
			#else
				outMatrices[anims[meshid.w].baseInstance + atomicAdd(anims[meshid.w].primCount, 1)] = outMat;
			#endif
		}
#endif
}


